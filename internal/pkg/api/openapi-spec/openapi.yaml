openapi: 3.0.3
info:
  title: DORAS Server
  description: |-
    Doras does delta updates.
    
    Some useful links:
    - [The Doras repository](https://github.com/unbasical/doras-server)
  version: 1.0.0
tags:
  - name: CloudAPI
    description: Request deltas.
paths:
  /api/v1/delta:
    get:
      tags:
        - CloudAPI
      summary: Request a delta between two OCI images.
      description: Request a delta between two OCI images.
      operationId: readDelta
      parameters:
        - name: from_digest
          in: query
          description: image identified by a digest from which a delta is requested
          required: true
          schema:
            type: string
            format: url
          example: registry.example.org/foo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        - name: to_digest
          in: query
          description: image identified by a digest to which a delta is requested (one and only one of `to_digest` and `from_tag` has to be provided)
          required: false
          schema:
            type: string
            format: url
          example: registry.example.org/foo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        - name: to_tag
          in: query
          description: image identified by a tag to which a delta is requested (one and only one of `to_digest` and `to_tag` has to be provided)
          required: false
          schema:
            type: string
            format: url
          example: registry.example.org/foo:bar
        - name: accepted_algorithm
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - bsdiff
                - tardiff
          description: List of accepted algorithms
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDeltaResponse'
        '202':
          description: Request was accepted and the delta will be available in the future.
        '400':
          description: Bad request (e.g. missing required parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              example:
                type: https://github.com/unbasical/doras-server/internal/pkg/api/openapi-spec/cloud-api.md
                title: example title
                status: 400
                detail: missing query parameter `from_digest`
                instance: https://github.com/unbasical/doras-server/internal/pkg/api/openapi-spec/cloud-api.md#missing-parameter
        '404':
          description: Images are not resolvable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              example:
                type: https://github.com/unbasical/doras-server/internal/pkg/api/openapi-spec/cloud-api.md
                title: failed to resolve image(s)
                status: 404
                detail: could not resolve from_digest=registry.example.org/foo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                instance: https://github.com/unbasical/doras-server/internal/pkg/api/openapi-spec/cloud-api.md#failed-to-resolve-image
        '406':
          description: Requested delta algorithm is not supported or images are not compatible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              example:
                type: https://github.com/unbasical/doras-server/internal/pkg/api/openapi-spec/cloud-api.md
                title: Unsupported delta algorithm.
                status: 406
                detail: Algorithm `foodiff` is not supported.
                instance: https://github.com/unbasical/doras-server/internal/pkg/api/openapi-spec/cloud-api.md#unsupported-algorithm
components:
  schemas:
    ReadDeltaResponse:
      type: object
      properties:
        delta_image:
          type: string
          format: url
          example: registry.example.org/foo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in the
            context of the provided API. Opposed to the specification in RFC-9457,
            it is neither recommended to be dereferenceable and point to a
            human-readable documentation nor globally unique for the problem type.
          default: 'about:blank'
          example: '/some/uri-reference'
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually not
            suited for non technical stakeholders and not localized.
          example: some description for the error situation
        instance:
          type: string
          format: uri-reference
          description: >
            A URI reference that identifies the specific occurrence of the problem,
            e.g. by adding a fragment identifier or sub-path to the problem type.
            May be used to locate the root of this problem in the source code.
          example: '/some/uri-reference#specific-occurrence-context'